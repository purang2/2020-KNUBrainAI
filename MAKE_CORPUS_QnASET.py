# -*- coding: utf-8 -*-
"""
Created on Fri Nov  6 01:03:26 2020

@author: puran/경북대학교 전자공학부 이은찬
"""
import json
import random
import pandas as pd
from pprint import pprint


#JSON NAME: 'messenger_corpus' + 1~4099

td_list=list()
#train_data=dict()

#0번쨰 json을 처리할때 전혀 관련없는 오답을 만들기 위해
#4099번째 json의 랜덤 데이터가 350개정도 초기에 들어가도록 구성
random_list=['거의만두피수준', '구리지!', '마쟈ㅋㄱㄱㅋㅋㄱㄱㄱㅋㄱㅋㄱ', '먹는데', '초록색 분식집 그릇도 반갑고', '{share:photo}', '달달구리 떡볶이', '저기....', '맛도좋고ㅋㄱㅋㄱㄱㅋㄱㄱㄱㄱㅋ', '웅ㅋㄱㅋㄱㄱㅋㅋㄱㄲ', '위생은 그냥그래보엿거든?', '근데 나름 엄청 무언가 깨끗히 치우고 계셧어 계속', 'ㅋㅋㅋ', '할매들이또성격이깨끗한할매는 겁나깨끗하지', '&name1&이는 배안고파?ㅋㄱㅋㄱㄱㄱ', '마쟈', '근데그냥시장통은 넘더럽...;;;', '그래서잘골라가야뎀', '거긴먼가무림의고수냄새가난다', '그사장님 엄청ㅠㅠ정성이셧웅', '시장통은 그냥정신이 없구', 'ㅋㅋㅋㅋ나배고프지그래서열심힞집가고', '잇자나', '근데우리목욜에', '만나면뭐먹을래 ?', '우리 그날 화악 땡기는거 가쟈', '아님 저번에', '아침이라화악땡기진...', '수원단호박파스타먹엇던', '거기가보까?ㅋㄱㅋㄱㄱㅋㄱㄱㅣㅣ', '노노 또가긴시름', '너랑만나는날고적은데', '아침부터 파스타는 너무 느글거리려나', '새로은데가겟어', '웅웅ㅋㄱㅋㄱㅋㄱㅋ그러쟛 찾아보께 아직2틀남앗으니', '케케케케 신난당', '찾아보진마!!', '힘쓰지마', '너의시간', '그런데쓰지마', '간만에 쉬는날 ❤😍먹는걸로', '스트레스풀고 노는거딩', '음식먹고싶은거나열해보자!', '목요일에먹을거 !', '&name1&이도 먹고픈거 생각해봐><', '나는 음 일단', '샤브샤브도 떠올랏구ㅋㄱㅋㄱㅋㄱ', '그래 같이', '떠올리자^^', '또 머잇징', '아 나는 샤브샤브 얼마전에 안조은일 잇엇름 3주전에;;', '대박', '야 그', '평소에 맨날 집에서만 먹어서', '오잉 무슨일?음식점에서?', '평촌 주공공이건물잇지 ?', '거기뽕잎샤브인가그게되게오래됏거든', '웅웅 거기 먹을거 거의 1층만잇는ㅜㅜ', '그리고예전에', '웅웅 나도가봣디 거기', '몇번간적도잇고', '웅웅', '걍그냥그런곳이거든', '그래서저번에&name4&랑 같이 셋이 갓어', '조금 바꼈어?맛이?', '그냥평타니까', '아니아니그런게아냐', '옹그럼??', '맛이바낀건 안조은일이아니구', '아니갓는데 ㅋㅋㅋㅋ', '막 고기에', '이상한', '웅웅 ㅋㄱㅋㄱㄱㄲㄱ거기오랜만이다', '가루???돌가루???같은게붕어잇는거야', '헐 음식에?', '근데첨엔그냥 얼음부스러기', '같은건줄알고', '걍다집어넣고 끓엿어', '웅웅 그렇게 보였겟네', '근데 먹다보니까', '헉 같이 짬뽕됏구머ㆍ', '진심 매우 막 안씹히는', '돌가루', '웅웅', '가막입에서나오는거', '그그그그 조개껍질씹으면', '나는 그 돌가루같이', '아니 근데 진짜 돌이엿어?', '절대안씹히는거탸', '아니그래서첨엔내입이이상한줄알고', '뱉엇어', '헐 이나가면 어떡하려구', '잘햇네', '웅웅', '근데 두번째먹엇는데 또 그러는거야', '진짜걍 이상항가루', 'ㅜㅜ그게뭐지?', '석회가루...', '그래서내가뱉엇는데', '샤브샤브에?돌가루라니', '&name3&도 자기도똑같이생각햇는데자기입이이상항줄알고', '참앗다는거야', '말도안돼 대박', '아욕나오네', '다시생각해도', '남편도 참았대?', '하긴', '음식점에서 그런게', '{share:photo}', '나온다는 생각은 안드니까', '아니', '헐', '그게아니라 먼가싶어서', '걐우뚱하고잇엇던거지', '색깔이 조금 돌같지 않네?', '그래서진짴ㅋㅋㅋ반복되니까 내가 사장을 불럿어 ㅋㅋㅋㅋ', '여기 이상한게나왓다고 ㅋㅋㅋㅋㅋ', '웅웅ㅋㄱㅋㅋㄱㅋㄱㄱㄱㄱㅋ', '근데 막 먹어도된다는거야 ㅋㅋㅋㅋㅌㅌ', '안씹히는데', 'ㄴㅋㅋㅋ', '도대체 그게멉니까 하고', '진짜걍 석회가루엿어', '으잉 그걸먹으래?', 'ㅋㅋㅋㅌㅋ진짜아욕나오네', '안씹히는데도?', '미친놈이따로없는거야', '그냥인간이먹으면', '너무하네 음식점 장사하면서', '안되는게들어잇엇어', '다른분들은 그러면', '사장님도 맛보던데', '근데 계속내가괜찮다고햇는데', '막 그럼다시준다면서', '새로주겟다는거야', '사실 새로주는게 맞지ㅜㅜ', '그래서아니갠찬타고이미 다끓엿다고 됏다고', '&name3&는', '그거어떻게먹어ㅠㅠ', '와대박', '나가자는', '말이야', '저런데ㅛㅓ어떻게먹냐고 그런거지', '아아 입맛이', '맛이이상한게아니라 진짜', '그냥 인간이먹으면 안되는덜', '떨어지셧구나ㅜㅜ', '찝찝하지', '당근', '계속 먹고잇엇던거고', '되게더러워ㅛ거든', '처음부터더러워서찝찝햇는데그냥 까딸스럽게굴지말고 참고대충먹고가자', '둘다속으로', '와 근데 저게 진짜 돌이면', '생각만그러고잇엇던거지', '돌이면나아차라리', '왜 거기 안에 들어잇던거야??', '돌이아니라 그냥 석회가루', '아 진짜 미쳣다', '돌가루라능건첨에 내눈에', '그랫다는거고', '먹는거에 그렇게 해놓고', '죄송하다고 안하셨웅?', '씹어보니까 걍 인간이먹음안되는 그런거엿어', 'ㅇㅇ 그런거안라고 걍계솓', '먹어도된대 ㄴㅋㅋㅋㅋㅋㅌ', '졸라웃으면서', '아니ㅋㄱㅋㄱㄱㄱㅋㄱㅋ', '그걸 누가먹어', 'ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅌ 진짜근데걍나왓어괜찮아요하고', '나왓어', '파는걸 그렇게 팔ㅅ연서', '팔면서', '아..다시생각하니까너무화난다', '대처하는게 너무 화난다', '암튼 거기가지마 &name2&아 너무더러워', '다음에다른친구랑 가더라도', '머리카락 나와도 사람들', '아냐 그게대처가문제가아니야', '다시는 안가는게 음식점 장사인데', '대처나발꺼지고 걍', '웅웅', '더럽다ㅜㅜ', '거기는 더러운곳이라', '가지말란거야', '안가야겟다', '위생이엏마나쓰레기면그래', '땡큐ㅠㅠ', '너거기절대가지마\n나알지?수정할수잇는거면내가 뭐라뭐라햇겟지', '맛집이 널리고 널렸누데', '근데딱보니까 답업으니까 됏다그러고', '굳이 거길 가기에는', '걍바로뛰쳐나왓어', '그렇지그렇지', '잘햇네', '수정이되고나발이고가아니고거긴그냥', '더러워', '절대가면안되', '괜히 입맛만 버렸겟다', '너도가지마\n위생에안일한태도를가진 사장은', '안돼', 'ㅜㅜ그럴때 갑자기 식욕 떨어지든데', '웅웅 그런 음식점사장님', 'ㅋㅋㅌ그래서걍내려가자마자 밑에일층에 무슨 구포국수?라는 잔치국수파는곳에서대충사먹엇어', '처음들어봐ㅋㅋㄱㅋㄱㄱㅋㄱㄱㄱㄱ', '&name4&때문에', '빨리어디든들어가야햇어', 'ㅜㅜ구포국수 거기 깔끔하대', '아아&name1&이ㅡ', '나 요새 청첩장 돌리느라', '친구들한테 밥사주는데', '응 맞아 갠찬ㅌ더라', '싼맛에조아', '음식점 많이 찾아보게 되잖웅', '울엄마최애식당임', '맞아 구포싸고 괜찮고 맛있웅', '구포국순ㄴ', 'ㅋㄱㅋㄱㄱㅋㄱㄱㄱ울엄마도', '잠시만 나걷고잇거든', '국물이맛있으시대ㅋㄱㅋㄱㄱㄱㅋ', '웅웅 조심히 걷구 짐많지?\n배도고프고ㅠㅠ고생했겠다', 'ㅋㅋㅋㅋㅋ 고마오', '나이제 전철내려서 버스기다려!!', 'ㄱㄲㅋㄱㅋㄱㄱㅋ가방무겁지?ㅠㅠ', 'ㅋㅋ 아냐아냐 견딜만해', '아배고프다', '어제 청첩장 밥사주믄서', '이수역으로가서', '암튼 그래서 얼마전 그일로인해 요새 샤브샤브는 겁나 안땡김', '파스타집갓는데', '맛있드라구ㅋㄱㅋㄱㅋㄱㅋ', '그래 그럼 샤브샤브는 패스하쟈', '이수역도왠지 뜨네기가마나서맛업응거같읃데', '맛잇엇음 ?', '마쟈ㅋㅋㄱㅋㄱㅋㄱㄱ아재동네같은데', '그와중에', 'ㅠㅠ돈마니썻겟네 맨날 그렇게 사주고다닐라믄', '최근에오픈한곳 갔거든', '사당주변도진짜먹을거업어', 'ㅠㅇㅠㅠ웅 엄마카드써서 엄청 눈치보여', '식당이름 머엿는데 ?', '마쟈 사당이수', '먹을거 없웅ㅠㅠ', '이즈이즈라는', '곳이엿웅', '그럼나는 사주지마', '돈많이썼으니가', '아녀 &name1&이는 더 맛있는거', '사주고파~~!!!', ';;;;;;', '아아그럼', '안댕 서운해ㅜㅜ사주고파', '{emoji}', '한끼는 너가사구 한끼는내가사자', '{emoji}', 'ㅋㅋㅋㄱㄱㄱㄱㅋㄱㄱ아녀 우리 애매하게 아점일지도 몰라', '오전부터보니까ㅋㄱㅋㄱㅋㄱㄱㅋ', '그니까!!', '&name1&아 먹고픈거', '아점먹구 저녁먹구!', '생각해뒀다가', '그날&name3&늦게옴', '아아그럼이러자', '한끼사먹구', '목요일 아침에 꼭얘기하쟝♡', '한끼는울집', '그', '샐러드', '아녀 무슨', '먹자', '시름말구!', '설거지하고&name1&이힘드러노노ㅠㅠㅠ', '샐러드가..?', '일회용품인데..?', '내가맛난거사줄게 두번먹쟈ㅋㅋㄱㅋㅋㄱㄱㄱ', '아근뎃', '어제 그사장님이', 'ㅋㅋㅋㅋ 댓어 샐러드도먹쟈!!! 일회용품리라 설거지안함 !!후수', '감자튀김이랑 리코타샐러드 서비스', '주셨어ㅋㄱㄱㄱㅋㅋㄱㅋ', 'ㅋㅋ왜 ?', '너가너므이뽀서 ?', '모르겟어ㄱㅋㄱㄱㄱㄱㄱ아니아니', '왠지', '음식점이 얼마', '생긴지 안됐나봐', '오 서비스를 잘하는 곳이네!!', '그래서 애들이 사진찍으니까', '갑자기 한개', '두개', '니가그러케조은 기억이잇으니까 나에게도추천하자나', 'ㅋㅋㅋㅋ', '서비스를!!', 'ㄱㄱㄲㄱㅋㄱㄱㅋㄱㄱㄱ맞아', '그러게머리좋네사진찍으니까', '딱내주면', '자기식당더빛나보이지', '더꽉차보이고 ㅋㅋㅋ', '음식은 다 기억하기 나름인거  같아', 'ㅋㄱㅋㄱㅋㄱㅋㄱㅋ그렇지', '글고 오늘도', '떡볶이 추억의 맛이잖웅', '그치만 뽕잎은정말안덴다 내가왠만하면 다신안가고그런게업단말이지 ?', '쳐묵는거조아해서..후..', '절대가지말응', 'ㅜㅜ', '근데거ㅅ긴증말업어져야됨', '그런 음식점은 알려줘 안가야겠다ㅋㄱㅋㄱㅋㄱㄱㅋ', 'ㄴ&name2&아 나이제집도착햇능데', '너무어지러워 ㅠㅠ 밥을못먹어서그런듯', '근데라면밖에 없어서..이거라도 먹으려고 끓이는중이야 ㅠㅠ', 'ㅠㅠ라면밖에 없어?', '&name1&이 잘먹고 다녀야', '기운날텐데ㅜㅜ\n건강에는 잘 먹는게 최고야', '특히 추워져서 면역도 떨어지구ㅠㅠ', '꽃게탕면 ?', '별루안조아하는데 ㅠ이거밖에업음 ㅠㅠ 흑흑', '얼큰하긴 하겠당ㅠㅠ', '나도 조율사 아저씨 다녀가시면', '뭐라도 먹고 집에 내려가야되는데', '걱정이당ㅠㅠ', '떡볶이가넘부실하긴햇지', '넌왜케밥을잘안챙겨먹닝??????!!!', '난돼지라잘먹어 오늘같은날만 이렇게먹는거야', '너가밥을잘먹어야하는데', '나는 이제 곧', '드레스 입는데', '식단조절도 안해갖고ㅠㅠ', '큰일이야', 'ㅋㅋㅋ그냥얼굴만이쁘면돼 몸은어차피안나와', '그리거니가지금좀덜먹는다고 더날씬하게안나옴\n맘편히먹어', '몸생각해서 좋은거먹어', '너가 밥제대로챙겨먹엇단소리를들은적이없다 ...', '고마워ㅠㅠㅠ하긴 먹는거', '체력으로도 이어지드라구', '요새 탄수화물 적게 먹어본다고', '하고있는데 기운이 없어ㅋㄱㅋㄱㅋㅋ', '헐.. ㅠㅠ 그랫구나', '맞아 탄수화물덜먹으면 체력딸림....', '근데 탄수화물을적게먹고 다요트를 하는중인데 떡볶이릉 무거...!?!?!?!?!?!?!', '너무 갑자기 땡겨갖고 식욕에', '나의 정신을 잃고야', '말앗응ㅋㅋㄱㅋㅋ벌써 다먹엇웅?', 'ㅋㅋㅋㅋ 이미진작다먹엇지 ...', '넘맛없엇다', '배가고파서먹긴먹는데 뭔가 맛있는걸로 배채우면 뿌듯하잖아\n맛없는걸로배채우면 슬픔 ㅠ', '오오드디어 조율사 아저씨 오셨다ㅋㄱㅋㄱㅋㄱㅋㅋㅋ', '이따가 ㅠㅠ얼큰한 우동이나 먹고프다', '그렇겟다ㅜㅜ밖에서 고생하고와서', '무슨 또 우동이야 먹지마']


for index in range(4099):
    jsonname= "messenger_corpus"+str(index+1)+'.json'
    #with open("messenger_corpus1.json","r",encoding='UTF-8') as corpus_json: 
    with open(jsonname,"r",encoding='UTF-8') as corpus_json: 
       corpus_list =json.load(corpus_json)
    
    #del corpus_list['document']['id']
    
    corpus_list =corpus_list['document'][0]['utterance']
    #corpus_list =corpus_list['metadata']
    
    #필요없는 정보 삭제
    for i in range(len(corpus_list)):
        del corpus_list[i]['id']
        del corpus_list[i]['form']
        del corpus_list[i]['time']
    
    answer_string=''
    
    #previous_speaker_id=corpus_list[0]['speaker_id']
    #previous_form = corpus_list[0]['original_form']

    #JSON 텍스트 추출시 100개 단위로 진행 상황 출력
    if index%100 ==0:
        print("JSON#"+ str(index) +": listlen: " + str(len(corpus_list)))    
    
    

    previous_form = ''
    original_form = ''
            
    #JSON 모든 데이터(?) 하나씩 처리    
    for i in range(1,len(corpus_list)):

        #데이터셋
        train_data=dict()

        previous_speaker_id=corpus_list[i-1]['speaker_id']
        #previous_form = corpus_list[i-1]['original_form']
        now_speaker_id=corpus_list[i]['speaker_id']       
        #original_form = corpus_list[i]['original_form']
              
        #같은 id(화자)가 연속되면      
        if now_speaker_id == previous_speaker_id:
            original_form= ''
            previous_form = previous_form + " " +corpus_list[i]['original_form']
            
            td_list[len(td_list)-1]['T']=previous_form
            #print(answer_string)

        #다른 ID의 경우: 데이터셋에 추가            
        else:
            
            if previous_form=='':
                previous_form = corpus_list[i-1]['original_form']
            
            if original_form=='':
                original_form = corpus_list[i]['original_form']
               
            
            #answer_string = original_form
            false_data = set()
            
            #set을 통해 fake 데이터 4개 중복없이 뽑음
            while len(false_data)!=4:
                false_data.add(random.choice(random_list))

            false_data =list(false_data)
            
            #F 4개 T 1개의 형식으로 추가
            train_data.update([['.Q',previous_form],['F',false_data],['T',original_form]])
            td_list.append(train_data)
            
            previous_form = original_form
            original_form = ''
            #recent_previous=answer_string
            #answer_string =original_form
        
        
        #랜덤리스트에 문자열 저장 
        random_list.append(original_form) 
        
        #50000개 이상의 경우, 80%를 비워주면서 적당한 크기의 유지 및 계속적 반복
        if len(random_list) > 50000:
            random_list=random_list[0:10000]
    
    #print(type(corpus_list))
    #pprint(corpus_list)
    
td_dataFrame=pd.DataFrame(td_list)    
print('pandas dataframe')
print(td_dataFrame)


#파일로 출력
#dataFrame -> txt
#td_dataFrame.to_csv('trainData_dataFrame.txt',sep='\t')
#td_dataFrame.to_csv('NLP_trainData_dataFrame.txt')
#print('Success: dataFrame to txt file')
#dataFrame -> csv
td_dataFrame.to_csv('NLP_trainData_dataFrame.csv')
print('Success: dataFrame to csv file')

#dataFrame -> csv / index 없는 버전
#td_dataFrame.to_csv('trainData_dataFrame.txt', index=False)


#print(random_list[270:620])   
#print(index+1)
#print(corpus_list['document']['original_form','speaker_id'])

